<script>
'use strict';

var swiperContainer = document.querySelector('.swiper');
var allCards = document.querySelectorAll('.swiper--card');
var nope = document.getElementById('nope');
var love = document.getElementById('love');

function initCards(card, index) {
  var newCards = document.querySelectorAll('.swiper--card:not(.removed)');

  newCards.forEach(function (card, index) {
    card.style.zIndex = allCards.length - index;
    card.style.transform = 'scale(' + (20 - index) / 20 + ') translateY(-' + 35 * index + 'px)';
    card.style.opacity = (10 - index) / 10;
  });

  swiperContainer.classList.add('loaded');
}

initCards();

allCards.forEach(function (el) {
  var hammertime = new Hammer(el);

  hammertime.on('pan', function (event) {
    el.classList.add('moving');
  });

  hammertime.on('pan', function (event) {
    if (event.deltaX === 0) return;
    if (event.center.x === 0 && event.center.y === 0) return;

    swiperContainer.classList.toggle('swiper_love', event.deltaX > 0);
    swiperContainer.classList.toggle('swiper_nope', event.deltaX < 0);

    var xMulti = event.deltaX * 0.03;
    var yMulti = event.deltaY / 80;
    var rotate = xMulti * yMulti;

    event.target.style.transform = 'translate(' + event.deltaX + 'px, ' + event.deltaY + 'px) rotate(' + rotate + 'deg)';
  });

  hammertime.on('panend', function (event) {
    el.classList.remove('moving');
    swiperContainer.classList.remove('swiper_love');
    swiperContainer.classList.remove('swiper_nope');

    var moveOutWidth = document.body.clientWidth * 2;
    // console.log(moveOutWidth);
    var keep = Math.abs(event.deltaX) < 20 || Math.abs(event.velocityX) < 0.5;

    if (!keep) {
      // If the user swipes right (likes the recipe), call the toggle_favorite action
      if (event.deltaX > 0) {
        var recipeId = el.getAttribute('data-recipe-id');
        if (recipeId) {
          // Make an AJAX request to toggle the favorite status
          fetch('/recipes/' + recipeId + '/toggle_favorite', {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
              'Content-Type': 'application/json'
            },
          })
          .then(response => response.json())
          .then(data => {
            if (data.status === 'success') {
            }
          })
          .catch(error => {
            console.error('Error:', error);
          });
        }
      }
    }

    event.target.classList.toggle('removed', !keep);

    if (keep) {
      event.target.style.transform = '';
    } else {
      var endX = Math.max(Math.abs(event.velocityX) * moveOutWidth, moveOutWidth);
      var toX = event.deltaX > 0 ? endX : -endX;
      var endY = Math.abs(event.velocityY) * moveOutWidth;
      var toY = event.deltaY > 0 ? endY : -endY;
      var xMulti = event.deltaX * 0.03;
      var yMulti = event.deltaY / 80;
      var rotate = xMulti * yMulti;

      event.target.style.transform = 'translate(' + toX + 'px, ' + (toY + event.deltaY) + 'px) rotate(' + rotate + 'deg)';
      initCards();
    }
  });

    // el.addEventListener('click', function () {
    //   // console.log('has been clicked');
    //   var recipeId = el.getAttribute('data-recipe-id');
    //   // console.log(recipeId);
    //   if (recipeId) {
    //     window.location.href = '/recipes/' + recipeId;
    //   }
    // });
  });
</script>

<script>
  function applyAnimationToCardAtIndex(index) {
    const cards = document.querySelectorAll('.swiper--card');

    cards.forEach((card, cardIndex) => {
      if (cardIndex === index) {
        card.querySelector(".path").style.animation = "swipe-dot 2s 0.5s infinite";
        card.querySelector(".hand-icon").style.animation = "swipe-hand 2s infinite";
      } else {
        const handIcon = card.querySelector(".hand-icon");
        handIcon.style.display = "none";
      }
    });
  }

  applyAnimationToCardAtIndex(0);
</script>
